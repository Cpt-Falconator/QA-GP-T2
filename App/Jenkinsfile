
pipeline{
    agent any
	stages{

        stage("Step 1") {
            steps {
                withCredentials(bindings: [usernamePassword(credentialsId: 'NexusAdmin', passwordVariable: 'NexusPassword', usernameVariable: 'NexusUser'), usernamePassword(credentialsId: 'awsKeys', passwordVariable: 'awsSecretKey', usernameVariable: 'awsKey'), string(credentialsId: 'NexusIP', variable: 'NexusIP')]) {
                // some block
                // In the jenkinsVM, sign into DockerHub and Kubectl (as jenkins user?)
                sh 'bash ./App/Scripts/logins.sh'
                }   
                
            }
        }
        stage("Step 2") {
            steps {
                //Docker compose up -d (to build all the images (frontend and backend))          
                sh 'cd ./App'
                sh 'ls'
                withCredentials(bindings: [usernamePassword(credentialsId: 'NexusAdmin', passwordVariable: 'NexusPassword', usernameVariable: 'NexusUser'), usernamePassword(credentialsId: 'awsKeys', passwordVariable: 'awsSecretKey', usernameVariable: 'awsKey'), string(credentialsId: 'NexusIP', variable: 'NexusIP')]) {
                dir('App')
                {
                    sh 'docker-compose up -d'
                }
            }
                
            }
        }
        stage("Run the backend and frontend tests") {
            steps {
                // Run the tests (npm test for frontend) (somehow test backend)
                sh 'bash Scripts/frontend-tests.sh'
                sh 'bash Scripts/backend-tests.sh'
            }
        }
        stage("Push the successful images to nexus repo") {
            steps {
                // Pushing the images ran to nexus repository
                sh 'bash Scripts/image-push.sh'
            }
        }
        stage("Update the Kubernetes files") {
            steps {
                // Updating the kubernetes files (deployments, services, configmap, secrets) to pull latest image
                sh 'bash Scripts/...'
            }
        }
    }
}

